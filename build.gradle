plugins {
    id "java"
    id "jacoco"
    id "checkstyle"
    alias(libs.plugins.jmh)
    alias(libs.plugins.release)
    alias(libs.plugins.jengelman)
}

apply plugin: "checkstyle"
apply plugin: "jacoco"
apply plugin: 'com.github.johnrengelman.shadow'

group "org.example"

repositories {
    mavenCentral()
}

dependencies {
    implementation libs.agrona
    implementation libs.artio.codecs
    implementation libs.apache.commons.collections4
    testImplementation libs.jupiter.api
    testRuntimeOnly libs.jupiter.engine
    testImplementation libs.jackson.databind
    implementation libs.lombok
    annotationProcessor libs.lombok
    testImplementation libs.lombok
    testAnnotationProcessor libs.lombok
}

compileJava {
    def javaVersion = JavaVersion.VERSION_11
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "SKIPPED", "FAILED"
    }
}

jmh {
    jvmArgs = ["-Djmh.ignoreLock=true"]
//    includes = ["Write*"]
    fork = 1
    warmupIterations = 3
    iterations = 5
    benchmarkMode = ["avgt"]
//    benchmarkMode = ["all"]
    timeUnit = "ns"
    failOnError = true
    duplicateClassesStrategy = DuplicatesStrategy.INCLUDE
}

jmhJar { duplicatesStrategy(DuplicatesStrategy.INCLUDE) }

jacocoTestReport {
    reports {
        xml.required.set(false)
        csv.required.set(false)
        html.required.set(true)
        html.destination file("output/jacoco/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
//            includes = [""]
//            excludes = [""]
            element = "CLASS"
            limit {
                counter = "LINE"
                minimum = 1.00
            }
        }
    }
}

check.dependsOn(jacocoTestCoverageVerification)

clean.doLast {
    project.delete(projectDir.toPath().resolve("output"))
}

release {
    failOnCommitNeeded = false
    failOnUpdateNeeded = false
}
